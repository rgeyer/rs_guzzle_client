HTTP/1.1 200 OK
Server: nginx/1.0.14
Date: Fri, 21 Sep 2012 16:51:17 GMT
Content-Type: application/vnd.rightscale.publication+json;charset=utf-8
Connection: keep-alive
Status: 200 OK
X-Runtime: 193
Content-Length: 16892
X-Request-Uuid: 80badca5e2644e0e83ce4aefb545b7cf
Set-Cookie: _session_id=411e4e906012da93719931a231b21ded; path=/; Secure; HttpOnly
Cache-Control: private, max-age=0, must-revalidate

{"revision_notes":"  * Install postfix mysql_pgsql from centosplus on CentOS\n  * Update app_wordpress to require nginx, apache, and php5 so that recipes can be run as operational scripts\n  * Set LVM vg data size to 50% to prevent possible data corruption\n  * Remove scheduler cookbook/recipe, using block_device continuous backups instead\n  * Set max snapshots to 10.  7 Daily + 1 Weekly + 1 Monthly + 1 Yearly = 10","updated_at":"2012/08/26 05:30:07 +0000","publisher":"Ryan Geyer","content_type":"ServerTemplate","commit_message":{"text":"  * Install posfix mysql_pgsql from centosplus on CentOS\n  * Update app_wordpress to require nginx, apache, and php5 so that recipes can be run as operational scripts\n  * Set LVM vg data size to 50% to prevent possible data corruption\n  * Remove scheduler cookbook/recipe, using block_device continuous backups instead\n  * Set max snapshots to 10.  7 Daily + 1 Weekly + 1 Monthly + 1 Yearly = 10","time":"2012/08/26 05:29:06 +0000","user":"ryan.geyer@rightscale.com"},"description":"# Description #\nThis is an All-In-One (AIO) server for hosting PHP based web sites/applications, as well as email for one or many domain names (virtual hosting).\n\n## Total Cost of Ownership ##\nThis ServerTemplate is designed to run within the confines of a [t1.micro](http://aws.amazon.com/ec2/instance-types/) EC2 instance.  A t1.micro instance requires that you use an EBS volume to store the operating system.  The MultiCloud Image this ServerTemplate uses automatically creates an 8GB EBS volume for this purpose.\n\nThis server template requires one additional EBS volume for storing configuration and application data, the size of which will vary based on what you're running.  The default size for this partition is 2GB.  Combined with the 8GB root partition the total EBS footprint is exactly 10GB, the maximum for the AWS free tier.\n\nWhen you first sign up for AWS you can take advantage of their [free tier](http://aws.amazon.com/free/) for all services for one year.\n\nWhile using this server template I've averaged $0.12 per month between EIP data transfer costs, and the additional EBS volume.\n\nAfter one year when the free tier expires, you can expect to spend under $15 per month if you pay for a t1.micro reserved instance, broken down thusly.\n\n* t1.micro reservation (heavy usage) for 1 year $62 ($5.17/mo but billed once at the beginning)\n* 730hr t1.micro usage @$0.005/hr (Reserved cost in US-EAST cloud) $3.65/mo\n* 8GB EBS Volume $0.80/mo\n* 2GB EBS Volume $0.20/mo\n* Snapshot Storage is variable depending on how you configure your retention policy.  Snapshots are incremental and store only the delta, so actual storage costs are quite low.\n\nThat totals out to $9.82/mo, which leaves $5.18 (out of $15) for data transfer, I/O requests and maybe some S3 storage.\n\nAs I personally run this more, I'll be able to give some more real world data, rather than just estimates.  The point though, is that this is dirt cheap given the control you have!\n\n## LNMP Virtual Hosting ##\nThe web hosting environment is a full LNMP stack consisting of;\n\n* Linux - CentOS 5.8\n* Nginx - 1.2.2\n* MySQL - 5.1.55-community\n* PHP - 5.3.6\n\n## Email Virtual Hosting ##\nIn addition to the LNMP stack, a Postfix server is installed and configured for virtual hosting of one or many email domains.  Currently, the postfix server is configured to relay email for configured email addresses (more information on that below) to one or more other email addresses.  I use this to accept email for a domain, and effectively \"forward\" it to my gmail account where I manage all of my email.\n\n# Usage #\n\n## Prerequisites ##\n\n### Elastic IP ###\nIt is *HIGHLY* recommended that you setup an Elastic IP for your server instance if you run this on AWS.  This will make things like vertical scaling and disaster recovery easier.\n\nIn clouds besides AWS, or in absence of an Elastic IP you'll just have to make DNS changes and wait for those changes to propagate.\n\nAlso, if you're going to be serious about running an email server, using an EIP is the only way to go so you don't get blacklisted etc.  Setup an EIP, then make sure you fill out [this form](https://aws-portal.amazon.com/gp/aws/html-forms-controller/contactus/ec2-email-limit-rdns-request) to setup a reverse DNS record for your hostname (like mail.yourdomain.com) to your EIP.  You can read about why this is important [here](http://www.simpledns.com/kb.aspx?kbid=1052)\n\n### Security Groups ###\nYou'll need to be able to communicate with your server from the interwebs.  This means you'll need to open some ports in one or more security groups, and add your server instance to those security groups.\n\nIn clouds which do not support security groups set the \"Firewall\" input to enabled, and all inbound access (besides the required ports listed below) will be blocked.\n\nAs a best practice, try to avoid making all of your changes to the \"default\" security group.  It's also better if you put the ports for each service in it's own security group, though just one security group which opens all ports for this server instance is probably okay too.  Here are the ports that are required to be able to communicate with this server.\n\n* SSH - TCP:22\n* SMTP - TCP:25\n* HTTP - TCP:80\n* HTTPS - TCP:443\n\n## Launching for the first time ##\nIf you've just imported this ServerTemplate from the library, here's what you need to know to get started.\n\n### Inputs ###\n* Database Admin Password\n\n  Pick a secure password for the database administrator.  The default administrator username is \"administrator\".  It's possible that you'll never need to use these credentials since the Chef recipes set everything up for you, but it's good to have in case of emergency or for administrative tasks not covered in an operational script etc.\n\n* Postfix MySQL Database Password\n\n  Pick a secure password for the user account that postfix will use to access the MySQL database.  Did I mention that Postfix configuration information is stored in MySQL?  I promise, I'll explain later.\n* Total Volume Size (1)\n\n  This server stores all of the data which needs to be persistent either on a separate attached storage volume, or on an LVM partition of your ephemeral storage to ease backups, disaster recovery, and vertical scaling.  Specify a volume size here that makes sense for the data you're storing, including MySQL databases and your web site/application html and code files.  **NOTE**: The default is 2GB\n\n* Backup Lineage (1)\n\nFor the attached volume, and for the continuous backups a lineage needs to be specified.  This is effectively a name for the data backup, feel free to specify anything for this.  For all of the volume management stuff I'm making heavy use of the RightScale \"Storage Toolbox\", and this input comes from those tools.  Take a peek at the documentation and runbook for the \"Storage Toolbox\" [here](http://support.rightscale.com/12345-Tutorials/Storage_Toolbox/Storage_Toolbox_Runbook)\n\n* Web Server Hostname\n\nSome basic tools will get installed and hosted for this server on a particular hostname.  These are things like phpmyadmin, and (hopefully, eventually) some web UI tools for managing your server.  You can specify the hostname you want this to appear on.  I recommend that you use a hostname specific to the management of this server, like tools.domain.com etc.\n\nIf you're in a hurry, and just wanted to get this up and running quickly, that's all you'll need to know.\n\n## Disaster Recovery or Vertical Scaling ##\nAs mentioned, all of the configuration and application data for all the services is stored on an attached or LVM managed volume.  That volume has a snapshot taken of it once per day.  Those snapshots can be used to start a new instance of this server with the data and configuration exactly as it was at that point in time.\n\nThis is useful for vertical scaling.  I.E. Using a bigger, badder instance type to manage more traffic.  It's also useful for disaster recovery.\n\nTo bring up a new instance from a snapshot, these are the steps.\n\n1. Find the AWS ID of the latest snapshot for your data volume\n  * Alternate first step is to create a snapshot \"right now\" by running the \"block_device::do_primary_backup\" or \"block_device::do_secondary_backup\" recipe on the current instance.\n2. Add a new server to your deployment using this ServerTemplate\n3. Click \"Launch\" and set all of your inputs to the desired values\n4. Launch the new instance\n5. Run the \"nginx::setup_vhost\" or \"app_wordpress::deploy\" (which ever is appropriate) once for each vhosted domain this server answers for.\n6. Verify web and email vhosts are working properly (change /etc/hosts file to point to new IP etc)\n7. Change your DNS records from the IP of the old instance, to the new one\n  * **Pro Tip**: Or, if you're using an Elastic IP, just reassign the the EIP to the new instance\n8. Once DNS records are propagated, or EIP remap is finished, decommission old instance\n9. Clean up volume and snapshots of old instance\n  * See \"Managing Artifacts\" below\n\n# Configuring Services #\n\n## Wordpress Powered Website ##\nIf you want to host a Wordpress powered website, you're only a few inputs and clicks away\n\nInputs\n1. MySQL Database Password for this Wordpress instance\n  Pick a secure password which Wordpress will use to access the database.  The Wordpress configuration file will automatically be created with this information\n2. VHOST Aliases\n  The possible hostname aliases (if any) for the vhost.  For instance to host the same content at www.yourdomain.com and yourdomain.com simply put \"yourdomain.com\" here.  Many values can be supplied, separated by spaces.  If you don't want any aliases leave the text missing in this field.\n3. VHOST FQDN\n  The fully qualified domain name (FQDN) of the new vhost to create.  Example www.apache.org\n\n## Website ##\nIf you want to host a website that's just static HTML, or a mix of HTML and some PHP files, you can set it up by running the \"nginx::setup_vhost\" script.\n\nThis script takes only two inputs.\n1. VHOST Aliases\n  The possible hostname aliases (if any) for the vhost.  For instance to host the same content at www.yourdomain.com and yourdomain.com simply put \"yourdomain.com\" here.  Many values can be supplied, separated by spaces.  If you don't want any aliases leave the field empty.\n2. VHOST FQDN\n  The fully qualified domain name (FQDN) of the new vhost to create.  Example www.apache.org\n\nRunning the script will create the necessary configuration file(s) for Apache2.  The root directory for the new website will be /mnt/storage/www/<VHOST FQDN>/htdocs.  Put the your web files there and you're all set!\n\n## Postfix Email Relaying ##\nThe configuration for postfix is stored in a MySQL database, thus the input attributes for a postfix MySQL user, database, and password.  Right now, you'll need to get right into the MySQL commandline in order to manipulate the configuration but there are plans to make this much more user friendly in the future.\n\n### Virtual Domains ###\nThe first thing you'll need to do is tell postfix which domain names it'll be handling email for.\n\nWhen connected to the server with SSH, type `mysql` to get into a mysql commandline client.  Then type `use postfix;` to select the postfix configuration database.  If you supplied a different database name for the postfix configuration, substitute that in the use command.  Then, for each domain you want to handle email for, run the following MySQL query.\n\n_INSERT INTO transport (domain,destination) VALUES ('yourdomain.com','virtual:')_\n\nWhere 'yourdomain.com' is the domain name you want to handle email for.\n\n### Virtual User Aliases ###\nOnce you've defined the domain names that you'll be handling email for, you'll want to setup which email addresses you'll be accepting email for, and what email address to relay them to.\n\nWhen connected to the server with SSH, type `mysql` to get into a mysql commandline client.  Then type `use postfix;` to select the postfix configuration database.  If you supplied a different database name for the postfix configuration, substitute that in the use command.  Then, for each email address you want to accept email for, run the following MySQL query.\n\n_INSERT INTO virtual (email,destination) VALUES ('you@yourdomain.com','you@gmail.com')_\n\nThe first value is the email address which your server will accept email for.  The 'yourdomain.com' must already be in transport table, which you would have added in the \"Virtual Domains\" section above.\n\nThe second value is the email address you want any emails sent to the 'you@yourdomain.com' relayed to.  It's just that easy!\n\nYou can specify many different email addresses to be relayed to the same destination address.  You can also specify a \"catchall\" destination for a domain by excluding the user.  I.E. Supplying '@yourdomain.com' for the first value, and 'you@gmail.com' as the second value would route any email sent to any address @yourdomain.com to your gmail address.  It's not advisable, but it can be done.\n\n# Managing Artifacts #\nWe've mentioned a couple times above that this server uses attachable volumes (where available) to store configuration and application data.  The creation of that volume, and the creation of the snapshots for backups is fully automated.  The number of snapshots for the current instance is even kept in check by the backup policy inputs.\n\nHowever, when you launch a new instance to replace an existing one, some artifacts get left behind which will need to be manually cleaned up.  Below you'll find information on what things to look out for.  Automating this cleanup is VERY high on my priority list for enhancements of this ServerTemplate.\n\n## Volumes ##\nWhen you terminate a running instance of this server template, the automatically created volume is not deleted.  So after performing the steps from the \"Disaster Recovery or Vertical Scaling\" section above, you'll want to look at the volumes in the same cloud as the terminated instance, and go ahead and delete it.\n\nYou may want to verify that you have a current snapshot of the volume first, though you would probably have already done that before launching a new instance and terminating the old one.\n\n## Snapshots ##\nSnapshots of the old volume associated with a terminated instance are not automatically deleted by the backup script based.  This is because the snapshots are not associated with the new volume or instance, so the script has no way of knowing that they are related.\n\nAs a result, you'll want to delete old snapshots which belong to terminated instances and/or deleted volumes.\n\n# Change Log #\n* Rev 1\n  * Initial release\n* Rev 2\n  * Replaced Apache with Nginx\n  * Running PHP5 FPM application server rather than a PHP module for Apache or Nginx\n  * Dropped incomplete support for Zend Framework\n  * Dropped Gitosis as a default, since I imagine I'm the only person using it, and it's a bit out of place\n  * Added Alerts for critical systems and failure/limp conditions\n  * New MCI which includes RightLink 5.6.28 and creates an 8GB root partition rather than 10GB\n  * Added ability to connect this server with the [Opscode](http://www.opscode.com/platform/) Chef platform to further customize your instance\n* Rev 4\n  * Updated to latest RightScale assets (RightLink 5.8, Storage Toolbox, etc)\n  * Added a default vhost with phpmyadmin\n* Rev 5\n  * Changes to Chef repository to allow public access\n* Rev 6\n  * Better defaults for Nginx\n  * Proper support for EBS Backed instances\n* Rev 7\n  * Install posfix mysql_pgsql from centosplus on CentOS\n  * Update app_wordpress to require nginx, apache, and php5 so that recipes can be run as operational scripts\n  * Set LVM vg data size to 50% to prevent possible data corruption\n  * Remove scheduler cookbook/recipe, using block_device continuous backups instead\n  * Set max snapshots to 10.  7 Daily + 1 Weekly + 1 Monthly + 1 Yearly = 10\n\n\n# TODO #\n* Setup a default vhost\n  * Including an SSL vhost that hosts various tools like phpmyadmin and a management tool for email configuration etc.\n    * This is partially done, in that phpmyadmin is deployed in a default vhost that redirects to SSL\n* More alerts\n  * Postfix high load\n  * MySQL high load\n  * Low memory\n  * Nginx high load\n* Reconsider ZendFramework support\n* Enable gitweb (probably within aforementioned SSL vhost)\n* Full and proper email stack (local delivery, pop3, imap, ldap configuration)","name":"Wordpress & Email All-In-One","created_at":"2012/08/26 05:30:06 +0000","links":[{"href":"/api/publications/12345","rel":"self"},{"href":"/api/publication_lineages/12345","rel":"lineage"}],"revision":7,"actions":[{"rel":"import"}]}